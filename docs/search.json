[{"path":"/articles/gsfa_intro.html","id":"environment-set-up","dir":"Articles","previous_headings":"","what":"Environment set-up","title":"Illustration of GSFA Application on Simulated Data","text":"Load GSFA package:","code":"library(GSFA) set.seed(46568)"},{"path":"/articles/gsfa_intro.html","id":"simulate-a-data-set","dir":"Articles","previous_headings":"","what":"Simulate a data set","title":"Illustration of GSFA Application on Simulated Data","text":"generate normal gene expression matrix \\(Y\\) 400 samples 600 genes binary perturbation matrix \\(G\\) 2 types perturbations according : \\[G_{im} \\overset{..d.}{\\sim} \\text{Bern}(0.2), \\phi_{ik} \\overset{..d.}{\\sim} N(0,0.5) \\Rightarrow Z = G \\beta + \\Phi,\\] \\[F_{jk} \\overset{..d.}{\\sim} \\text{Bern}(0.1), U_{jk} \\overset{..d.}{\\sim} N(0, 0.5) \\Rightarrow W_{jk}=F_{jk}\\cdot U_{jk},\\] \\[E_{ij} \\overset{..d.}{\\sim} N(0,1) \\Rightarrow Y = ZW^T+E.\\] Gene expression \\(Y\\) generated 5 factors, factor ~0.1 genes non-zero loading . , 1st factor associated perturbation 1, 2nd factor associated perturbation 2.","code":"beta_true <- matrix(c(1, 0, 0, 0.8, 0, 0, 0, 0, 0, 0), ncol = 5) sim_data <- normal_data_sim(N = 400, P = 600, K = 5, M = 2,                             beta_true = beta_true,                             pi_true = rep(0.1, 5),                             psi_true = 0.5, G_prob = 0.2)"},{"path":"/articles/gsfa_intro.html","id":"fit-gsfa","dir":"Articles","previous_headings":"","what":"Fit GSFA","title":"Illustration of GSFA Application on Simulated Data","text":"Run GSFA given normal expression data binary perturbation matrix:","code":"fit <- fit_gsfa_multivar(Y = sim_data$Y, G = sim_data$G,                          K = 5, init.method = \"svd\",                          prior_w_s = 10, prior_w_r = 0.2,                          prior_beta_s = 5, prior_beta_r = 0.2,                          niter = 1000, used_niter = 500,                          verbose = T, return_samples = T) Initializing Z and W with SVD. Iteration [50] finished. Iteration [100] finished. Iteration [150] finished. Iteration [200] finished. Iteration [250] finished. Iteration [300] finished. Iteration [350] finished. Iteration [400] finished. Iteration [450] finished. Iteration [500] finished. Iteration [550] finished. Iteration [600] finished. Iteration [650] finished. Iteration [700] finished. Iteration [750] finished. Iteration [800] finished. Iteration [850] finished. Iteration [900] finished. Iteration [950] finished. Iteration [1000] finished."},{"path":[]},{"path":"/articles/gsfa_intro.html","id":"perturbation-effects-on-factors","dir":"Articles","previous_headings":"Interpretation","what":"Perturbation effects on factors","title":"Illustration of GSFA Application on Simulated Data","text":"Note factors interchangeable, orders won’t necessarily match original. estimated associations factors perturbations : Factor 3 associated perturbation 1 absolute effect size ~1. Factor 2 associated perturbation 2 absolute effect size ~0.8. PIPs (posterior inclusion probability, measurement certainty) associations factors perturbations : Associations high certainty : Factor 3 ~ Perturbation 1 Factor 2 ~ Perturbation 2. Visualization perturbation effects factors:","code":"signif(fit$posterior_means$beta_pm[-nrow(fit$posterior_means$beta_pm), ],        digits = 3) Factor_1 Factor_2 Factor_3 Factor_4 Factor_5 1 -0.000763 -0.00157  -1.0100 -0.00283 -0.01080 2 -0.005840  0.77400  -0.0145  0.00364 -0.00337 signif(fit$posterior_means$Gamma_pm[-nrow(fit$posterior_means$Gamma_pm), ],        digits = 3) Factor_1 Factor_2 Factor_3 Factor_4 Factor_5 1    0.022    0.034    1.000    0.042    0.056 2    0.066    1.000    0.102    0.056    0.044 dotplot_beta_PIP(fit, target_names = c(\"Perturbation 1\", \"Perturbation 2\"))"},{"path":"/articles/gsfa_intro.html","id":"factor-interpretation","dir":"Articles","previous_headings":"Interpretation","what":"Factor interpretation","title":"Illustration of GSFA Application on Simulated Data","text":"Genes non-zero loading factors can obtained thresholding gene PIP. example, non-zero genes factor 2 : Compare genes truly factor 2:","code":"est_genes_factor2 <- which(fit$posterior_means$F_pm[, 2] > 0.95) true_genes_factor2 <- which(sim_data$F[, 2] > 0) num_olap <- length(intersect(est_genes_factor2, true_genes_factor2)) # Sensitivity: sens <- num_olap / length(true_genes_factor2) print(paste0(\"Sensitivity: \", signif(sens, digits = 3))) # Specificity: fpr <- (length(est_genes_factor2) - num_olap) / (sum(sim_data$F[, 2] == 0)) print(paste0(\"Specificity: \", signif(1 - fpr, digits = 3))) [1] \"Sensitivity: 0.8\" [1] \"Specificity: 1\""},{"path":"/articles/gsfa_intro.html","id":"perturbation-effects-on-genes","dir":"Articles","previous_headings":"Interpretation","what":"Perturbation effects on genes","title":"Illustration of GSFA Application on Simulated Data","text":"Differentially expressed genes (DEGs) can detected thresholding LFSR. DEGs detected Perturbation 1 sensitivity specificity discovery: DEGs detected Perturbation 2 sensitivity specificity discovery: Visualization total effects perturbation selected genes:","code":"genes_detected1 <- which(fit$lfsr[, 1] < 0.05) print(paste0(length(genes_detected1), \" genes passed LFSR < 0.05.\"))  true_genes_factor1 <- which(sim_data$F[, 1] > 0) num_olap1 <- length(intersect(genes_detected1, true_genes_factor1)) # Sensitivity: sens1 <- num_olap1 / length(true_genes_factor1) print(paste0(\"Sensitivity: \", signif(sens1, digits = 3))) # Specificity: fpr1 <- (length(genes_detected1) - num_olap1) / (sum(sim_data$F[, 1] == 0)) print(paste0(\"Specificity: \", signif(1 - fpr1, digits = 3))) [1] \"46 genes passed LFSR < 0.05.\" [1] \"Sensitivity: 0.852\" [1] \"Specificity: 1\" genes_detected2 <- which(fit$lfsr[, 2] < 0.05) print(paste0(length(genes_detected2), \" genes passed LFSR < 0.05.\"))  true_genes_factor2 <- which(sim_data$F[, 2] > 0) num_olap2 <- length(intersect(genes_detected2, true_genes_factor2)) # Sensitivity: sens2 <- num_olap2 / length(true_genes_factor2) print(paste0(\"Sensitivity: \", signif(sens2, digits = 3))) # Specificity: fpr2 <- (length(genes_detected2) - num_olap2) / (sum(sim_data$F[, 2] == 0)) print(paste0(\"Specificity: \", signif(1 - fpr2, digits = 3))) [1] \"44 genes passed LFSR < 0.05.\" [1] \"Sensitivity: 0.8\" [1] \"Specificity: 1\" dotplot_total_effect(fit,                      gene_indices = c(1, 12, 14, 88, 89, 91, 123),                      target_names = c(\"Perturbation 1\", \"Perturbation 2\"))"},{"path":"/articles/gsfa_intro.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Illustration of GSFA Application on Simulated Data","text":"","code":"sessionInfo() R version 4.1.2 (2021-11-01) Platform: aarch64-apple-darwin20 (64-bit) Running under: macOS Big Sur 11.5.2  Matrix products: default BLAS:   /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRblas.0.dylib LAPACK: /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRlapack.dylib  locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8  attached base packages: [1] stats     graphics  grDevices utils     datasets  methods   base       other attached packages: [1] ggplot2_3.3.5 dplyr_1.0.7   GSFA_0.2.6     loaded via a namespace (and not attached):  [1] tidyselect_1.1.1  xfun_0.28         bslib_0.3.1       purrr_0.3.4        [5] reshape2_1.4.4    colorspace_2.0-2  vctrs_0.3.8       generics_0.1.1     [9] htmltools_0.5.2   yaml_2.2.1        utf8_1.2.2        rlang_0.4.12      [13] pkgdown_2.0.2     jquerylib_0.1.4   pillar_1.6.4      glue_1.5.1        [17] withr_2.4.3       DBI_1.1.1         lifecycle_1.0.1   plyr_1.8.6        [21] stringr_1.4.0     munsell_0.5.0     gtable_0.3.0      ragg_1.2.2        [25] memoise_2.0.1     evaluate_0.14     labeling_0.4.2    knitr_1.36        [29] fastmap_1.1.0     fansi_0.5.0       highr_0.9         Rcpp_1.0.7        [33] scales_1.1.1      cachem_1.0.6      desc_1.4.0        jsonlite_1.7.2    [37] farver_2.1.0      systemfonts_1.0.4 fs_1.5.1          textshaping_0.3.6 [41] digest_0.6.29     stringi_1.7.6     rprojroot_2.0.2   grid_4.1.2        [45] tools_4.1.2       magrittr_2.0.1    sass_0.4.0        tibble_3.1.6      [49] crayon_1.4.2      pkgconfig_2.0.3   ellipsis_0.3.2    assertthat_0.2.1  [53] rmarkdown_2.11    R6_2.5.1          compiler_4.1.2"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yifan Zhou. Maintainer, author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhou Y (2022). GSFA: Bayesian Guided Sparse Factor Analysis. R package version 0.2.6, https://github.com/gradonion/GSFA.","code":"@Manual{,   title = {GSFA: Bayesian Guided Sparse Factor Analysis},   author = {Yifan Zhou},   year = {2022},   note = {R package version 0.2.6},   url = {https://github.com/gradonion/GSFA}, }"},{"path":"/index.html","id":"gsfa-bayesian-sparse-factor-analysis-on-single-cell-crispr-screen-data","dir":"","previous_headings":"","what":"Bayesian Guided Sparse Factor Analysis","title":"Bayesian Guided Sparse Factor Analysis","text":"Single-cell RNA-seq multiplexed CRISPR screening (e.g. CROP-seq, Perturb-seq) powerful tool study transcriptomic effects genetic perturbations, bringing insights gene regulation. However, traditional analysis data poses various statistical interpretation challenges. GSFA (Guided Sparse Factor Analysis) assumes perturbation target gene affects certain latent factors, turn changes expression individual genes, identifies genetically controlled factors associated perturbation joint statistical framework. also summarizes effects perturbation individual genes sum effects mediated factors. Provided normalized gene expression matrix perturbation matrix (cells contain type gRNAs) single-cell CRISPR screening experiment, GSFA can (1) identify coordinated factors (gene modules) associations genetic perturbations; (2) interpret biological meanings factors (gene modules) gene ontology/pathway enrichment analysis thanks sparse gene weights factors; (3) detect differentially expressed genes genetic perturbation thresholding local false sign rate (LFSR). input output","code":""},{"path":"/index.html","id":"citing-this-work","dir":"","previous_headings":"","what":"Citing this work","title":"Bayesian Guided Sparse Factor Analysis","text":"find GSFA package source code repository useful work, please cite: Yifan Zhou, Kaixuan Luo, Mengjie Chen Xin . novel Bayesian factor analysis method improves detection genes biological processes affected perturbations single-cell CRISPR screening. bioRxiv doi: 10.1101/2022.02.13.480282 (2021).","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Bayesian Guided Sparse Factor Analysis","text":"source code software repository made available terms MIT license.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Guided Sparse Factor Analysis","text":"install development version GSFA package Github, run: cloned repository locally, can install package install_local function devtools. Assuming local GSFA repository, run code install package: Note installing package require C++ compiler setup appropriate version R installed computer.","code":"install.packages(\"devtools\") devtools::install_github(\"gradonion/GSFA\", build_vignettes = TRUE) devtools::install_local(build_vignettes = TRUE)"},{"path":"/index.html","id":"using-the-package","dir":"","previous_headings":"","what":"Using the package","title":"Bayesian Guided Sparse Factor Analysis","text":"Please see package vignette using GSFA simulated example: guidance using GSFA analyze real single-cell CRISPR screen data, please refer code repository, analysis results paper .","code":"library(GSFA) vignette(\"gsfa_intro\")"},{"path":"/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Bayesian Guided Sparse Factor Analysis","text":"GSFA package developed Yifan Zhou Lab University Chicago.","code":""},{"path":"/reference/covariate_removal.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariate Correction for Gene Expression Matrix — covariate_removal","title":"Covariate Correction for Gene Expression Matrix — covariate_removal","text":"Remove effects sample covariates gene expression via linear regression.","code":""},{"path":"/reference/covariate_removal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariate Correction for Gene Expression Matrix — covariate_removal","text":"","code":"covariate_removal(expression_mat, covariate_df)"},{"path":"/reference/covariate_removal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariate Correction for Gene Expression Matrix — covariate_removal","text":"expression_mat sample gene numeric matrix stores gene expression values; covariate_df sample covariate numeric matrix stores sample covariates;","code":""},{"path":"/reference/covariate_removal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariate Correction for Gene Expression Matrix — covariate_removal","text":"sample gene numeric matrix stores corrected gene expression values.","code":""},{"path":"/reference/deviance_residual_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Deviance Residual Transformation on Gene Count Matrix — deviance_residual_transform","title":"Deviance Residual Transformation on Gene Count Matrix — deviance_residual_transform","text":"Performs deviance residual transformation (proposed Townes et al., 2019) converts given raw gene count matrix continuous matrix quantities analogous z-scores approximately follow normal distribution.","code":""},{"path":"/reference/deviance_residual_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deviance Residual Transformation on Gene Count Matrix — deviance_residual_transform","text":"","code":"deviance_residual_transform(count_mat)"},{"path":"/reference/deviance_residual_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deviance Residual Transformation on Gene Count Matrix — deviance_residual_transform","text":"count_mat sample gene numeric matrix stores gene count values;","code":""},{"path":"/reference/deviance_residual_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deviance Residual Transformation on Gene Count Matrix — deviance_residual_transform","text":"sample gene numeric matrix stores transformed deviance residual values.","code":""},{"path":"/reference/dotplot_beta_PIP.html","id":null,"dir":"Reference","previous_headings":"","what":"Dotplot of the Effects of Perturbations on Factors — dotplot_beta_PIP","title":"Dotplot of the Effects of Perturbations on Factors — dotplot_beta_PIP","text":"Dotplot Effects Perturbations Factors","code":""},{"path":"/reference/dotplot_beta_PIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dotplot of the Effects of Perturbations on Factors — dotplot_beta_PIP","text":"","code":"dotplot_beta_PIP(   fit,   target_names,   reorder_targets = target_names,   reorder_factors = NULL,   exclude_offset = TRUE )"},{"path":"/reference/dotplot_beta_PIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dotplot of the Effects of Perturbations on Factors — dotplot_beta_PIP","text":"fit object class \"gsfa_fit\"","code":""},{"path":"/reference/dotplot_beta_PIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dotplot of the Effects of Perturbations on Factors — dotplot_beta_PIP","text":"ggplot object.","code":""},{"path":"/reference/dotplot_beta_PIP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dotplot of the Effects of Perturbations on Factors — dotplot_beta_PIP","text":"size dot represents PIP association; color represents effect size.","code":""},{"path":"/reference/dotplot_total_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Dotplot of the Total Effects of Perturbations on Genes — dotplot_total_effect","title":"Dotplot of the Total Effects of Perturbations on Genes — dotplot_total_effect","text":"Dotplot Total Effects Perturbations Genes","code":""},{"path":"/reference/dotplot_total_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dotplot of the Total Effects of Perturbations on Genes — dotplot_total_effect","text":"","code":"dotplot_total_effect(   fit,   gene_indices,   gene_names = gene_indices,   target_names = NULL,   reorder_targets = NULL,   plot_max_score = NULL )"},{"path":"/reference/dotplot_total_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dotplot of the Total Effects of Perturbations on Genes — dotplot_total_effect","text":"fit object class \"gsfa_fit\"","code":""},{"path":"/reference/dotplot_total_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dotplot of the Total Effects of Perturbations on Genes — dotplot_total_effect","text":"ggplot object.","code":""},{"path":"/reference/dotplot_total_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dotplot of the Total Effects of Perturbations on Genes — dotplot_total_effect","text":"Sizes dots represent LFSR bins; colors dots represent summarized effect sizes.","code":""},{"path":"/reference/fit_gsfa_multivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar","text":"Performs GSFA given gene expression matrix matching perturbation information using Gibbs sampling.","code":""},{"path":"/reference/fit_gsfa_multivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar","text":"","code":"fit_gsfa_multivar(   Y,   G,   K,   fit0,   prior_type = c(\"mixture_normal\", \"spike_slab\"),   init.method = c(\"svd\", \"random\"),   prior_w_s = 50,   prior_w_r = 0.2,   prior_beta_s = 20,   prior_beta_r = 0.2,   niter = 500,   used_niter = floor(niter/2),   lfsr_niter = used_niter,   verbose = TRUE,   return_samples = TRUE )"},{"path":"/reference/fit_gsfa_multivar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar","text":"Y sample gene numeric matrix stores normalized gene expression values; .matrix(Y) TRUE; G Either numeric vector sample perturbation numeric matrix stores sample-level perturbation information; length nrow G nrow(Y); K Number factors use model; one K fit0 needed; fit0 list class 'gsfa_fit' obtained previous fit_gsfa_multivar run, iterations Gibbs sampling can continue last updates ; prior_type Type sparse prior used gene weights, can \"mixture_normal\" \"spike_slab\", \"mixture_normal\" sometimes works better inducing sparsity; init.method Method initialize factors, can one \"svd\" (truncated SVD Y) \"random\"; niter Total number Gibbs sampling iterations; used_niter Number iterations (counting last iteration) posterior means parameters computed; lfsr_niter Number iterations (counting last iteration) posterior samples use computation LFSR; return_samples Boolean indicator whether posterior samples throughout Gibbs sampling returned;","code":""},{"path":"/reference/fit_gsfa_multivar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar","text":"list class 'gsfa_fit' stores Gibbs sampling updates posterior mean estimates, prior parameters used inference.","code":""},{"path":"/reference/fit_gsfa_multivar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar","text":"Uses functions implemented Rcpp GSFA_gibbs_inference.cpp.","code":""},{"path":"/reference/fit_gsfa_multivar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar","text":"","code":"if (FALSE) { fit0 <- fit_gsfa_multivar(Y, G, 10, init.method = \"svd\", niter = 500, used_niter = 200) fit1 <- fit_gsfa_multivar(Y, G, fit0 = fit0, niter = 500, used_niter = 200) }"},{"path":"/reference/fit_gsfa_multivar_2groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar_2groups","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar_2groups","text":"Performs GSFA given gene expression matrix matching perturbation information using Gibbs sampling samples come two groups","code":""},{"path":"/reference/fit_gsfa_multivar_2groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar_2groups","text":"","code":"fit_gsfa_multivar_2groups(   Y,   G,   group,   K,   fit0,   prior_type = c(\"mixture_normal\", \"spike_slab\"),   init.method = c(\"svd\", \"random\"),   prior_w_s = 50,   prior_w_r = 0.2,   prior_beta_s = 20,   prior_beta_r = 0.2,   niter = 500,   used_niter = floor(niter/2),   lfsr_niter = used_niter,   verbose = TRUE,   return_samples = TRUE )"},{"path":"/reference/fit_gsfa_multivar_2groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar_2groups","text":"Y sample gene numeric matrix stores normalized gene expression values; .matrix(Y) TRUE; G Either numeric vector sample perturbation numeric matrix stores sample-level perturbation information; length nrow G nrow(Y); group vector sample size length, two types unique values indicating one two groups sample belongs ; K Number factors use model; one K fit0 needed; fit0 list class 'gsfa_fit' obtained previous fit_gsfa_multivar run, iterations Gibbs sampling can continue last updates ; one K fit0 needed; prior_type Type sparse prior used gene weights, can \"mixture_normal\" \"spike_slab\", \"mixture_normal\" sometimes works better inducing sparsity; init.method Method initialize factors, can one \"svd\" (truncated SVD Y) \"random\"; niter Total number Gibbs sampling iterations; used_niter Number iterations (counting last iteration) posterior means parameters computed; lfsr_niter Number iterations (counting last iteration) posterior samples use computation LFSR; return_samples Boolean indicator whether posterior samples throughout Gibbs sampling returned;","code":""},{"path":"/reference/fit_gsfa_multivar_2groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar_2groups","text":"list class 'gsfa_fit' stores Gibbs sampling updates posterior mean estimates, prior parameters used inference.","code":""},{"path":"/reference/fit_gsfa_multivar_2groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar_2groups","text":"Similar function fit_gsfa_multivar(), associations factors perturbations estimated group samples separately.","code":""},{"path":"/reference/fit_gsfa_multivar_2groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Guided Sparse Factor Analysis on Perturbed Gene Expression Matrix — fit_gsfa_multivar_2groups","text":"","code":"if (FALSE) { fit0 <- fit_gsfa_multivar_2groups(Y, G, group, 10, init.method = \"svd\", niter = 500, used_niter = 200) fit1 <- fit_gsfa_multivar_2groups(Y, G, group, fit0 = fit0, niter = 500, used_niter = 200) }"},{"path":"/reference/normal_data_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a dataset with gene expression and perturbation according to a normal model — normal_data_sim","title":"Simulate a dataset with gene expression and perturbation according to a normal model — normal_data_sim","text":"Generate binary perturbation matrix continuous gene expression matrix according factor model normal noise terms.","code":""},{"path":"/reference/normal_data_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a dataset with gene expression and perturbation according to a normal model — normal_data_sim","text":"","code":"normal_data_sim(   N = 400,   P = 600,   K = 5,   M = 2,   beta_true = matrix(c(1, 0, 0, 0.8, 0, 0, 0, 0, 0, 0), ncol = K),   pi_true = rep(0.1, K),   sigma_w2_true = rep(0.5, K),   psi_true = 1,   G_prob = 0.05,   offset = FALSE )"},{"path":"/reference/normal_data_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a dataset with gene expression and perturbation according to a normal model — normal_data_sim","text":"N Number samples simulate P Number genes simulate K Number factors simulate M Number perturbations simulate beta_true perturbation factor numeric matrix stores association pi_true True sparsity factor G_prob Bernoulli probability based generate binary perturbation matrix G effect sizes;","code":""},{"path":"/reference/normal_data_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a dataset with gene expression and perturbation according to a normal model — normal_data_sim","text":"list object following elements: Y sample gene matrix continuous gene expression values; G binary sample perturbation matrix; Z sample factor matrix; F binary gene factor matrix indicates whether gene non-zero loading factor; U gene factor matrix normal effect sizes, F*U gives W, loading matrix.","code":""},{"path":"/reference/pearson_residual_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Pearson Residual Transformation on Gene Count Matrix — pearson_residual_transform","title":"Pearson Residual Transformation on Gene Count Matrix — pearson_residual_transform","text":"Performs Pearson residual transformation (proposed Townes et al., 2019) converts given raw gene count matrix continuous matrix quantities analogous z-scores approximately follow normal distribution.","code":""},{"path":"/reference/pearson_residual_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pearson Residual Transformation on Gene Count Matrix — pearson_residual_transform","text":"","code":"pearson_residual_transform(count_mat)"},{"path":"/reference/pearson_residual_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pearson Residual Transformation on Gene Count Matrix — pearson_residual_transform","text":"count_mat sample gene numeric matrix stores gene count values;","code":""},{"path":"/reference/pearson_residual_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pearson Residual Transformation on Gene Count Matrix — pearson_residual_transform","text":"sample gene numeric matrix stores transformed Pearson residual values.","code":""},{"path":"/reference/poisson_count_sim_var_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate gene expression count data — poisson_count_sim_var_scale","title":"Simulate gene expression count data — poisson_count_sim_var_scale","text":"Generate gene expression count data Poisson model based continuous gene expression rates generated normal model.","code":""},{"path":"/reference/poisson_count_sim_var_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate gene expression count data — poisson_count_sim_var_scale","text":"","code":"poisson_count_sim_var_scale(   sim_data,   p_scale_mean = 5e+05,   p_scale_sd = 1e+05,   p_offset = 1/5e+05 )"},{"path":"/reference/poisson_count_sim_var_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate gene expression count data — poisson_count_sim_var_scale","text":"sim_data dataset generated normal_data_sim() p_scale_mean mean normal distribution library size drawn p_scale_sd variance normal distribution library size drawn p_offset offset number added input expression rates","code":""},{"path":"/reference/poisson_count_sim_var_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate gene expression count data — poisson_count_sim_var_scale","text":"list sample gene count matrix added original dataset input.","code":""},{"path":"/reference/poisson_count_sim_var_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate gene expression count data — poisson_count_sim_var_scale","text":"Count \\(c_{ij}\\) generated Poisson model based rate \\(y_{ij}\\) library size (scaling factor) \\(L_i\\) generated normal model. $$c_{ij} \\sim Pois(L_i exp(y_{ij} + \\text{p_offset}))$$","code":""},{"path":"/reference/select_top_devres_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection Based on the Deviance Statistics of Genes — select_top_devres_genes","title":"Feature Selection Based on the Deviance Statistics of Genes — select_top_devres_genes","text":"Select top genes ranked deviance statistics.","code":""},{"path":"/reference/select_top_devres_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Selection Based on the Deviance Statistics of Genes — select_top_devres_genes","text":"","code":"select_top_devres_genes(dev_resid_mat, num_top_genes = 6000)"},{"path":"/reference/select_top_devres_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature Selection Based on the Deviance Statistics of Genes — select_top_devres_genes","text":"dev_resid_mat sample gene numeric matrix stores deviance residuals; num_top_genes Number top genes keep;","code":""},{"path":"/reference/select_top_devres_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature Selection Based on the Deviance Statistics of Genes — select_top_devres_genes","text":"numeric vector stores indices top num_top_genesgenes ranked deviance statistics.","code":""}]
